<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/LINMUJU.github.io/2023/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <url>/LINMUJU.github.io/2023/11/22/python/</url>
    <content><![CDATA[<h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>linux：&#x2F;<br>windows：( \C:\ D:\ )<br>绝对路径：以根目录为起始<br>相对路径，以当前为起始点(.)，上一级为(..)，再上一级(..&#x2F;..)，下一级(.&#x2F;)</p>
<h2 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h2><p>+在原功能的基础上增加读写功能<br>x创建写模式<br>f&#x3D;open(“文件路径”,”模式：读(r)、清空原数据写(w)、在原文件基础上继续写(a)”,encoding&#x3D;”编码”)<br>f&#x3D;close()<br>or<br>with open(“文件路径”,”模式：读(r)、清空原数据写(w)、在原文件基础上继续写(a)”,encoding&#x3D;”编码”) as f</p>
<h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><p>rt以文本模式打开<br>rb以二进制模式打开<br>print(f.read()) 一次性读完所有，并记录文件<br>print(f.read(byte)) 一次性读相应字节数<br>print(f.readline()) 读一行内容并打印<br>print(f.readlines()) 返回全部文件内容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称:&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./data.text&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">line = f.readline() <span class="comment">#读一行</span></span><br><span class="line"><span class="keyword">while</span> line != <span class="string">&quot;&quot;</span> : <span class="comment">#判断当前是否为空</span></span><br><span class="line">    <span class="built_in">print</span>(line) <span class="comment">#不为空则打印当前行</span></span><br><span class="line">    line = f.readline() <span class="comment">#读取下一行</span></span><br></pre></td></tr></table></figure>
<h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><p>f.write()<br>ls &#x3D; [“中国”, “法国”, “美国”]<br>f.writelines(ls)<br>f.seek(0)</p>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><pre><code>数据的维度：一维、二维、多维、高维
一维数据的表示：列表类型(有序)和集合类型(无序)
一维数据的存储：空格分隔、逗号分隔、特殊符号分隔
一维数据的处理：字符串方法 .split() 和 .join()
</code></pre>
<h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><pre><code>二维数据的表示：列表类型，其中每个元素也是一个列表
CSV格式：逗号分隔表示一维，按行分隔表示二维
二维数据的处理：for循环+.split()和.join()
</code></pre>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h2><p>try<br>except<br>try：代码<br>except:可能发生的异常类型 print(“不符合规则”)<br>except:捕捉所有类型<br>else:结果<br>finally:结束程序</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>库:import unittest<br>被测试文件:text.py<br>测试文件:test_text.py<br>from 文件名 import 函数名&#x2F;类名<br>class Test类名(unittest.TestCase):<br>    def setUp(self):<br>        self.sentence &#x3D; Sentence(“测试开始”)<br>    def test_(self):<br>        assert 会直接中断<br>        self.assertEqual(self.sentence.被测试类或函数)<br>python -m unittest 运行 .表示测试通过F表示没有通过<br>assertEqual(A,B)   取反assertNotEqual(A,B)<br>assertTrue(A)     取反assertFalse(A)<br>asserttln(A,B)   A in B   取反assertNotln(A,B)</p>
<h1 id="列表、字典、元组"><a href="#列表、字典、元组" class="headerlink" title="列表、字典、元组"></a>列表、字典、元组</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>shopping_list&#x3D;[,] 列表是可变的<br>.append 添加<br>max(list)<br>min(list)<br>sorted(list)</p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>example_tuple&#x3D;(,) 不可变，但可以存相同</p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>dict&#x3D;{“键”:”值”,} 可变<br>    dict[“键”]&#x3D;”值” 添加<br>    “键” in dict 可知该键是否存在<br>    del dict[“键”]&#x3D;”值” 删除<br>    dict.key()所有键<br>    dict.valus()所有值<br>    dict.items()所有键值对<br>    d.get(k, <default>) 键k存在，则返回相应值，不在则返回<default>值<br>    d.pop(k, <default>) 键k存在，则取出相应值，不在则返回<default>值<br>    d.popitem() 随机从字典d中取出一个键值对，以元组形式返回<br>    d.clear() 删除所有的键值对<br>    len(d)</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><pre><code>集合用大括号 &#123;&#125; 表示，元素间用逗号分隔
建立集合类型用 &#123;&#125; 或 set()
建立空集合类型，必须使用set()
</code></pre>
<p>S.add(x) 如果x不在集合S中，将x增加到S<br>S.discard(x) 移除S中元素x，如果x不在集合S中，不报错<br>S.remove(x) 移除S中元素x，如果x不在集合S中，产生KeyError异常<br>S.clear() 移除S中所有元素<br>S.pop() 随机返回S的一个元素，更新S，若S为空产生KeyError异常<br>S.copy() 返回集合S的一个副本<br>len(S) 返回集合S的元素个数<br>x in S 判断S中元素x，x在集合S中，返回True，否则返回False<br>x not in S 判断S中元素x，x不在集合S中，返回True，否则返回False<br>set(x) 将其他类型变量x转变为集合类型</p>
<p>包含关系比较、数据去重</p>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列类型：字符串类型、元组类型、列表类型</p>
<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="获取网页内容-requests"><a href="#获取网页内容-requests" class="headerlink" title="获取网页内容 requests"></a>获取网页内容 requests</h2><h2 id="解析网页内容"><a href="#解析网页内容" class="headerlink" title="解析网页内容"></a>解析网页内容</h2><p>HTTP<br>GET<br>POST<br>请求行：<br>    POST&#x2F;user&#x2F;info HTTP&#x2F;1.1<br>请求头：<br>    HOST:<a href="http://www.example.com/">www.example.com</a><br>    User-Agent:curl&#x2F;7.77.0<br>    Accept:<em>&#x2F;</em><br>        e:接受HTML text&#x2F;html、接受JOSN application&#x2F;json、 接受HTML和JSON text&#x2F;html,application&#x2F;json、接受任意类型*&#x2F;*<br>请求体：&#x2F;&#x2F;GET一般是空的<br>    {“username”:<br>    “email”:”llj.qq.com”}</p>
<h3 id="网页技术结构"><a href="#网页技术结构" class="headerlink" title="网页技术结构"></a>网页技术结构</h3><p>HTML(定义网页的结构和信息) CSS(定义网页的样式) JavaScript(定义用户和网页的交互逻辑)<br>HTML</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt; 告知浏览器是html</span><br><span class="line">&lt;html&gt; 开始</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt; 标题，最多h6</span><br><span class="line">        &lt;p&gt;给你&lt;br&gt;换行&lt;b&gt;加粗&lt;/b&gt;&lt;i&gt;斜体&lt;/i&gt;&lt;u&gt;加下划线&lt;/u&gt;&lt;/p&gt; 文字</span><br><span class="line">        &lt;p class=&quot;content&gt;&lt;/p&gt; 定义类的名称</span><br><span class="line">        &lt;img src=&quot;链接&quot;width=&quot;px&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;链接跳转&quot;target=&quot;指定网页的打开方式_self _blank&quot;&gt;文字&lt;/a&gt;</span><br><span class="line">        &lt;div style=&quot;background-color:red&quot;&gt;&lt;/div&gt; 容器，可以直接改变整体的颜色等</span><br><span class="line">        &lt;span&gt;&lt;/span&gt; 容器，可以改变一部分颜色等</span><br><span class="line">        &lt;ol&gt; 有序</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;ul&gt; 无序</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot;&gt; 添加属性</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;表头一&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;表头二&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">                &lt;tr&gt; 第一行</span><br><span class="line">                    &lt;td&gt;内容&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt; 第二行</span><br><span class="line">                    &lt;td&gt;内容&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;                </span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt; 结束</span><br></pre></td></tr></table></figure>
<h2 id="储存和分析数据BeautifulSoup4"><a href="#储存和分析数据BeautifulSoup4" class="headerlink" title="储存和分析数据BeautifulSoup4"></a>储存和分析数据BeautifulSoup4</h2><p>soup &#x3D; BeautifulSoup(content,”html.parser”)<br>all&#x3D;soup.findAll(“标签”,attrs&#x3D;{“class”:”value”})<br>利用for循环筛选</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment">#伪装为浏览器</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#获得回应</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:/vc/py/title.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> titles:</span><br><span class="line">    <span class="keyword">for</span> start_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">        response = requests.get(<span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;start_num&#125;</span>&quot;</span>,headers=headers)</span><br><span class="line">        <span class="comment">#print(response.text)</span></span><br><span class="line">        html=response.text</span><br><span class="line">        soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="comment">#寻找标题</span></span><br><span class="line">        all_titles = soup.findAll(<span class="string">&quot;span&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;title&quot;</span>&#125;)<span class="comment">#标签，类</span></span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> all_titles:</span><br><span class="line">            title_string = title.string</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> title_string:</span><br><span class="line">                titles.write(title_string)</span><br><span class="line">                titles.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="wordcloud库的使用"><a href="#wordcloud库的使用" class="headerlink" title="wordcloud库的使用"></a>wordcloud库的使用</h1><p>wordcloud库把词云当作一个WordCloud对象<br>w.generate(txt) 向WordCloud对象w中加载文本txt<br>w.to_file(filename) 将词云输出为图像文件，.png或.jpg格式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">c = wordcloud.WordCloud()</span><br><span class="line">c.generate(<span class="string">&quot;wordcloud by Python&quot;</span>)</span><br><span class="line">c.to_file(<span class="string">&quot;pywordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>w = wordcloud.WordCloud(&lt;参数&gt;)
width 指定词云对象生成图片的宽度，默认400像素
height 指定词云对象生成图片的高度，默认200像素
min_font_size 指定词云中字体的最小字号，默认4号
max_font_size 指定词云中字体的最大字号，根据高度自动调节
font_step 指定词云中字体字号的步进间隔，默认为1
font_path 指定字体文件的路径，默认None
max_words 指定词云显示的最大单词数量，默认200
stop_words 指定词云的排除词列表，即不显示的单词列表
mask 指定词云形状，默认为长方形，需要引用imread()函数
background_color 指定词云图片的背景颜色，默认为黑色
mask = imread(&quot;图形照片&quot;) from imageio import imread
</code></pre>
<h1 id="jieba库"><a href="#jieba库" class="headerlink" title="jieba库"></a>jieba库</h1><ul>
<li>中文文本需要通过分词获得单个的词语</li>
<li>jieba是优秀的中文分词第三方库，需要额外安装</li>
<li>jieba库提供三种分词模式，最简单只需掌握一个函数</li>
</ul>
<p>分词三种模式</p>
<ul>
<li>精确模式：把文本精确的切分开，不存在冗余单词 jieba.lcut(s)</li>
<li>全模式：把文本中所有可能的词语都扫描出来，有冗余 jieba.lcut(s, cut_all&#x3D;True)</li>
<li>搜索引擎模式：在精确模式基础上，对长词再次切分jieba.lcut_for_search(s)</li>
</ul>
<p>jieba.add_word(w)向分词词典增加新词</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E://AATemporary_folder//python_review//report.txt&quot;</span>,<span class="string">&quot;r+&quot;</span>,encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> txt:</span><br><span class="line">    txt=txt.read()</span><br><span class="line">words=jieba.lcut(txt)</span><br><span class="line">counts=&#123;&#125; <span class="comment">#定义数量字典</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word)==<span class="number">1</span>: <span class="comment">#如果是一个字的话即不是词，跳过</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word]=counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">items=<span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)<span class="comment">#实现倒序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    word,count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(word,count))</span><br></pre></td></tr></table></figure>

<h1 id="turtle"><a href="#turtle" class="headerlink" title="turtle"></a>turtle</h1><p>turtle.setup(width, height, startx, starty) 建立绘制窗口<br>turtle.goto(x, y) 空间坐标前进与后退<br>turtle.seth(angle) 改变行进的方向，绝对<br>turtle.left(angle) 左转<br>turtle.right(angle) 右转<br>turtle.colormode(mode) 颜色<br>turtle.penup() turtle.pu()抬起画笔<br>turtle.pendown() turtle.pd()落下画笔<br>turtle.pensize(width) turtle.width(width)画笔宽度<br>turtle.pencolor(color) 画笔颜色<br>turtle.forward(d) turtle.fd(d)向前行进<br>turtle.circle(r, extent&#x3D;None)r: 默认圆心在海龟左侧r距离的位置，extent: 绘制角度，默认是360度整圆<br>turtle.setheading(angle) turtle.seth(angle)改变行进方向</p>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p>基本随机数函数:seed(), random()<br>扩展随机数函数:randint(), getrandbits(), uniform(),randrange(), choice(), shuffle(), sample()</p>
<h1 id="Pylnstaller"><a href="#Pylnstaller" class="headerlink" title="Pylnstaller"></a>Pylnstaller</h1><p>pip install pyinstaller<br>pyinstaller -F  &lt;文件名.py&gt;<br>–clean 清理打包过程中的临时文件<br>-D, –onedir 默认值，生成dist文件夹<br>-F, –onefile 在dist文件夹中只生成独立的打包文件<br>-i &lt;图标文件名.ico&gt; 指定打包程序使用的图标(icon)文件<br>pyinstaller -F Text_progress_bar.py #打包exe<br>pyinstaller -F -w Text_progress_bar.py #不带控制台打包<br>pyinstaller -F -w chengzi.ico Text_progress_bar.py #打包指定exe图标<br><a href="https://app.xunjiepdf.com/img2icon/">https://app.xunjiepdf.com/img2icon/</a>链接转化成ico图片</p>
<h1 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h1><p>字符串反转</p>
<blockquote>
<blockquote>
<blockquote>
<p>a&#x3D;’123456789’<br>a &#x3D; a[::-1]</p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/LINMUJU.github.io/2023/11/22/Git/</url>
    <content><![CDATA[<h2 id="github的安装"><a href="#github的安装" class="headerlink" title="github的安装"></a>github的安装</h2><p>sudo apt-get install git</p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>建立仓库，以github.io命名</p>
<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p><strong>生成密钥</strong><br>ssh-keygen -t rsa -C “<a href="mailto:&#88;&#88;&#x58;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#88;&#88;&#x58;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a>“</p>
<pre><code>双引号内是你的github注册地址，所有提示可直接回车默认选项
若有多个密钥则可设定位置
</code></pre>
<p><strong>查看密钥</strong><br>cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>需复制全部内容</p>
<p><strong>复制密钥</strong></p>
<p>打开github-用户-setting-SSHKEY-add-复制</p>
<p><strong>检查链接</strong></p>
<p>ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;</a></p>
<pre><code>成功标志
You’ve successfully authenticated, but GitHub does not provide shell access
</code></pre>
<p><strong>身份验证</strong></p>
<pre><code>git config --global user.name &quot;&quot;   //配置用户名
git config --global user.email &quot;2460205801@qq.com&quot;    //配置email
</code></pre>
<p><strong>仓库下载</strong></p>
<pre><code>git clone http
</code></pre>
<p><strong>上传文件</strong></p>
<pre><code>git add 文件名
git commit -m &quot;注释&quot;
git push
</code></pre>
<p>若需要输入用户名以及密码：</p>
<pre><code>username：邮箱地址
password：Account setting-&gt; Developer setting-&gt; Fine-grained token 创立密钥并输入
</code></pre>
]]></content>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
</search>
